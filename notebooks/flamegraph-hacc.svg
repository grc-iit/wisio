<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="150" onload="init(evt)" viewBox="0 0 1200 150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="150.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="133" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="133" > </text>
<g id="frames">
<g >
<title>[16.851-33.702] Size=5 737.64062GB 46.7% | Time=2 0.63211s/p 13.6% | Ops=3 11881 16.3% | Files=6 1200 46.8% | Bandwidth=1 2.26202GB/s 209.0% | Parallelism=9 1200 93.8% | Xfer=6 63.57579MB 49.7% | Confidence=45.7% (51 samples, 50.44%)</title><rect x="600.0" y="69" width="590.0" height="15.0" fill="rgb(214,156,24)" rx="2" ry="2" />
<text  x="603.00" y="79.5" >[16.851-33.702] Size=5 737.64062GB 46.7% | Time=2 0.63211s/p 13.6% | Ops=3 11881 ..</text>
</g>
<g >
<title>[25.277-33.702] Size=1 52.71875GB 3.3% | Time=2 0.49360s/p 10.6% | Ops=1 849 1.2% | Files=10 97 3.8% | Bandwidth=1 2.23055GB/s 206.1% | Parallelism=10 97 7.6% | Xfer=6 63.58539MB 49.7% | Confidence=44.3% (17 samples, 16.81%)</title><rect x="993.3" y="53" width="196.7" height="15.0" fill="rgb(237,65,20)" rx="2" ry="2" />
<text  x="996.33" y="63.5" >[25.277-33.702] Size=1 52..</text>
</g>
<g >
<title>[16.851-21.064] Size=2 230.07031GB 14.6% | Time=1 0.37272s/p 8.0% | Ops=1 3768 5.2% | Files=8 529 20.6% | Bandwidth=1 2.32863GB/s 215.2% | Parallelism=1 529 41.3% | Xfer=6 62.52442MB 48.8% | Confidence=28.6% (4 samples, 3.96%)</title><rect x="895.0" y="37" width="49.2" height="15.0" fill="rgb(225,168,17)" rx="2" ry="2" />
<text  x="898.00" y="47.5" >[16...</text>
</g>
<g >
<title>[8.426-12.638] Size=1 8.16406GB 0.5% | Time=1 0.36768s/p 7.9% | Ops=1 145 0.2% | Files=10 40 1.6% | Bandwidth=1 0.99380GB/s 91.8% | Parallelism=10 40 3.1% | Xfer=6 57.65517MB 45.0% | Confidence=42.9% (4 samples, 3.96%)</title><rect x="550.8" y="37" width="49.2" height="15.0" fill="rgb(205,122,35)" rx="2" ry="2" />
<text  x="553.83" y="47.5" >[8.4..</text>
</g>
<g >
<title>[16.851-25.277] Size=5 684.92188GB 43.3% | Time=2 0.63451s/p 13.6% | Ops=3 11032 15.1% | Files=6 1120 43.7% | Bandwidth=1 2.26444GB/s 209.3% | Parallelism=7 1120 87.5% | Xfer=6 63.57505MB 49.7% | Confidence=42.9% (17 samples, 16.81%)</title><rect x="796.7" y="53" width="196.6" height="15.0" fill="rgb(249,220,28)" rx="2" ry="2" />
<text  x="799.67" y="63.5" >[16.851-25.277] Size=5 68..</text>
</g>
<g >
<title>[0.000-8.426] Size=1 0.39844GB 0.0% | Time=1 0.00987s/p 0.2% | Ops=1 17 0.0% | Files=10 17 0.7% | Bandwidth=1 2.41608GB/s 223.3% | Parallelism=10 17 1.3% | Xfer=9 24.00000MB 18.8% | Confidence=47.1% (17 samples, 16.81%)</title><rect x="206.7" y="53" width="196.6" height="15.0" fill="rgb(251,141,50)" rx="2" ry="2" />
<text  x="209.67" y="63.5" >[0.000-8.426] Size=1 0.39..</text>
</g>
<g >
<title>all (101 samples, 100%)</title><rect x="10.0" y="101" width="1180.0" height="15.0" fill="rgb(226,78,8)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>[4.213-8.426] Size=1 0.39844GB 0.0% | Time=1 0.00987s/p 0.2% | Ops=1 17 0.0% | Files=10 17 0.7% | Bandwidth=1 2.41608GB/s 223.3% | Parallelism=10 17 1.3% | Xfer=9 24.00000MB 18.8% | Confidence=47.1% (4 samples, 3.96%)</title><rect x="354.2" y="37" width="49.1" height="15.0" fill="rgb(222,2,40)" rx="2" ry="2" />
<text  x="357.17" y="47.5" >[4.2..</text>
</g>
<g >
<title>[29.489-33.702] Size=1 24.68750GB 1.6% | Time=2 0.68803s/p 14.8% | Ops=1 400 0.5% | Files=10 40 1.6% | Bandwidth=1 2.02506GB/s 187.1% | Parallelism=10 40 3.1% | Xfer=6 63.20000MB 49.4% | Confidence=44.3% (4 samples, 3.96%)</title><rect x="1140.8" y="37" width="49.2" height="15.0" fill="rgb(220,160,34)" rx="2" ry="2" />
<text  x="1143.83" y="47.5" >[29...</text>
</g>
<g >
<title>[21.064-25.277] Size=3 454.85156GB 28.8% | Time=2 0.64916s/p 13.9% | Ops=2 7264 10.0% | Files=7 791 30.9% | Bandwidth=1 2.23115GB/s 206.2% | Parallelism=2 791 61.8% | Xfer=5 64.12004MB 50.1% | Confidence=31.4% (4 samples, 3.96%)</title><rect x="944.2" y="37" width="49.1" height="15.0" fill="rgb(215,46,29)" rx="2" ry="2" />
<text  x="947.17" y="47.5" >[21...</text>
</g>
<g >
<title>[25.277-29.489] Size=1 28.03125GB 1.8% | Time=1 0.35716s/p 7.7% | Ops=1 449 0.6% | Files=10 57 2.2% | Bandwidth=1 2.41361GB/s 223.0% | Parallelism=10 57 4.5% | Xfer=6 63.92873MB 49.9% | Confidence=42.9% (4 samples, 3.96%)</title><rect x="1091.7" y="37" width="49.1" height="15.0" fill="rgb(224,75,32)" rx="2" ry="2" />
<text  x="1094.67" y="47.5" >[25...</text>
</g>
<g >
<title>[0.000-16.851] Size=1 52.35938GB 3.3% | Time=1 0.32624s/p 7.0% | Ops=1 919 1.3% | Files=10 194 7.6% | Bandwidth=1 1.80099GB/s 166.4% | Parallelism=8 194 15.2% | Xfer=6 58.34168MB 45.6% | Confidence=40.0% (51 samples, 50.44%)</title><rect x="10.0" y="69" width="590.0" height="15.0" fill="rgb(236,130,51)" rx="2" ry="2" />
<text  x="13.00" y="79.5" >[0.000-16.851] Size=1 52.35938GB 3.3% | Time=1 0.32624s/p 7.0% | Ops=1 919 1.3% |..</text>
</g>
<g >
<title>[12.638-16.851] Size=1 43.79688GB 2.8% | Time=1 0.24956s/p 5.4% | Ops=1 757 1.0% | Files=10 194 7.6% | Bandwidth=1 1.94180GB/s 179.4% | Parallelism=8 194 15.2% | Xfer=6 59.24439MB 46.3% | Confidence=40.0% (4 samples, 3.96%)</title><rect x="501.7" y="37" width="49.1" height="15.0" fill="rgb(212,160,21)" rx="2" ry="2" />
<text  x="504.67" y="47.5" >[12...</text>
</g>
<g >
<title>[8.426-16.851] Size=1 51.96094GB 3.3% | Time=1 0.32537s/p 7.0% | Ops=1 902 1.2% | Files=10 194 7.6% | Bandwidth=1 1.78940GB/s 165.4% | Parallelism=8 194 15.2% | Xfer=6 58.98891MB 46.1% | Confidence=40.0% (17 samples, 16.81%)</title><rect x="403.3" y="53" width="196.7" height="15.0" fill="rgb(235,227,21)" rx="2" ry="2" />
<text  x="406.33" y="63.5" >[8.426-16.851] Size=1 51...</text>
</g>
<g >
<title>[0.000-33.702] Size=5 790.00000GB 50.0% | Time=2 0.64205s/p 13.8% | Ops=3 12800 17.6% | Files=6 1280 50.0% | Bandwidth=1 2.22892GB/s 206.0% | Parallelism=10 1280 100.0% | Xfer=6 63.20000MB 49.4% | Confidence=47.1% (101 samples, 99.89%)</title><rect x="10.0" y="85" width="1180.0" height="15.0" fill="rgb(220,29,35)" rx="2" ry="2" />
<text  x="13.00" y="95.5" >[0.000-33.702] Size=5 790.00000GB 50.0% | Time=2 0.64205s/p 13.8% | Ops=3 12800 17.6% | Files=6 1280 50.0% | Bandwidth=1 2.22892GB/s 206.0% | Parallelism=10 1280 10..</text>
</g>
<g >
<title>[0.000-4.213] Size= | Time= | Ops= | Files= | Bandwidth= | Parallelism= | Xfer= | Confidence=nan% (4 samples, 3.96%)</title><rect x="305.0" y="37" width="49.2" height="15.0" fill="rgb(251,185,51)" rx="2" ry="2" />
<text  x="308.00" y="47.5" >[0.0..</text>
</g>
</g>
</svg>
