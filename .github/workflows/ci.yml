name: Build and Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04"]
        python: ["3.8", "3.9", "3.10", "3.11"]
    name: ${{ matrix.os }}-${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Checkout PR
        uses: actions/checkout@v4
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Cache system dependencies
        id: cache-apt
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            ca-certificates \
            lsb-release \
            wget
          wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt install -y ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt update
          sudo apt install -y \
            build-essential \
            cmake \
            git \
            libarrow-dev \
            libhdf5-dev \
            libncurses-dev \
            libopenmpi-dev \
            libparquet-dev \
            libreadline-dev \
            meson \
            ninja-build \
            nlohmann-json3-dev \
            openmpi-bin \
            openmpi-common

      - name: Cache build directories
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            build/
          key: ${{ runner.os }}-py${{ matrix.python }}-build-${{ hashFiles('**/*.py', '**/*.cpp', '**/*.hpp', '**/*.h', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python }}-build-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade meson-python setuptools wheel
          pip install -r tests/requirements.txt

      - name: Install WisIO
        run: |
          pip install .[darshan,dftracer] \
            -Csetup-args="--prefix=$HOME/.local" \
            -Csetup-args="-Denable_tests=true" \
            -Csetup-args="-Denable_tools=true"

      - name: Run Python tests with coverage
        run: |
          pytest --verbose --cov=wisio --cov-report=xml

      - name: Run C++ tests
        run: |
          meson build --prefix=$HOME/.local -Denable_tests=true -Denable_tools=true
          meson compile -C build --verbose
          meson test -C build --verbose
          meson test -C build --verbose --setup=mpi

      - name: Run WisIO
        run: |
          wisio +analyzer=darshan percentile=0.99 trace_path=tests/data/extracted/darshan-dxt
          wisio +analyzer=dftracer percentile=0.99 trace_path=tests/data/extracted/dftracer-raw
          wisio +analyzer=recorder percentile=0.99 trace_path=tests/data/extracted/recorder-parquet

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python }}
          path: |
            build/meson-logs/
            .coverage
            coverage.xml
          retention-days: 7
